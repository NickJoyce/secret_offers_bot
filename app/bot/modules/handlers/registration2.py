from aiogram import types, Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, CommandStart, StateFilter
import logging.config
from app.database.queries.tg_clients import get_client, update_client, create_clients
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode, ContentType
from aiogram.fsm.context import FSMContext
from app.bot.modules.keyboards.registration import request_contact_keyboard, select_greeting_offer_callback, link_kb, first_letters
from app.bot.modules.utils import escape_markdown_v2
from app.database.queries.greeting_offers import get_greeting_offer
from app.conns.talk_me.accounts import talk_me
from app.database.queries.talk_me_messages_from_client import get_client_id
from asyncio import sleep
from zoneinfo import ZoneInfo
import pytz
from app.tasks.monitoring import is_subscriber
from app.bot.modules.utils import unique_first_letters




from app.conns.es.accounts import es
from datetime import datetime, timezone, date, time


import os
from settings import BASE_DIR, IS_AUTH

from app.database.conn import AsyncSessionLocal
from app.bot.main import bot


logger = logging.getLogger(__name__)

router = Router(name=__name__)


# if IS_AUTH:
#     router.message.middleware(AuthMiddleware())



class RegistrationStates(StatesGroup):
    tg_id = State()
    reg_name = State()  
    reg_phone = State()
    tg_username = State()
    tg_first_name = State()
    tg_last_name = State()
    city = State()
    
    

    


@router.message(CommandStart(), StateFilter(None))
async def start_command_handler(msg: Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await get_client(tg_id=msg.from_user.id)
    if user:
        if user.is_active:
            await msg.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç",
        )
        else:
            await msg.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            )
    else:
        await state.set_state(RegistrationStates.reg_name)
        await msg.answer(
            """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ó–ê–ö–†–´–¢–´–ô –ö–õ–£–ë ¬´–ü–û–î–†–£–ñ–ö–ò¬ª

–≠—Ç–æ –∑–∞–∫—Ä—ã—Ç—ã–π Telegram-–∫–∞–Ω–∞–ª –æ—Ç –∫—Ä—É–ø–Ω–µ–π—à–µ–π —Å–µ—Ç–∏ –∫–ª–∏–Ω–∏–∫ –ª–∞–∑–µ—Ä–Ω–æ–π —ç–ø–∏–ª—è—Ü–∏–∏ –∏ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏ –ü–æ–¥—Ä—É–∂–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã –¥–µ–ª–∏–º—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–∫–∏–¥–∫–∞–º–∏ –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ —Å–µ—Ç–∏

–¢–æ–ª—å–∫–æ –∑–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ RF-–ª–∏—Ñ—Ç–∏–Ω–≥,  –ª–∞–∑–µ—Ä–Ω—É—é —ç–ø–∏–ª—è—Ü–∏—é –∏ —Å–∞–º—É—é –∂–µ–ª–∞–Ω–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É 2025 –≥–æ–¥–∞ BBL Forever Young —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –¥–æ 70%!  

üëâ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É, –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.

–ù–∞–ø–∏—à–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç:""",
        )
    
   


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞---
# @router.message(RegistrationStates.promocode)
# async def process_promocode(message: types.Message, state: FSMContext):
#     promocode = message.text
#     # –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç FSM
#     await state.update_data(promocode=promocode)
#     # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
#     await state.set_state(RegistrationStates.reg_name)
    
#     await message.answer(
#         f"–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ù–∞–ø–∏—à–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç:",




# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.message(RegistrationStates.reg_name)
async def process_name(message: types.Message, state: FSMContext):
    user_name = message.text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç FSM
    await state.update_data(reg_name=user_name)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(RegistrationStates.reg_phone)
    
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=request_contact_keyboard
    )
    

@router.message(RegistrationStates.reg_phone)
async def process_phone(message: types.Message, state: FSMContext):
    if message.content_type == ContentType.CONTACT:
        phone_number = message.contact.phone_number
        user_id_from_contact = message.contact.user_id
        if user_id_from_contact == message.from_user.id:
            await state.update_data(reg_phone=phone_number)
            await state.update_data(tg_id=message.from_user.id)
            await state.update_data(tg_username=message.from_user.username)
            await state.update_data(tg_first_name=message.from_user.first_name)
            await state.update_data(tg_last_name=message.from_user.last_name)
    
           
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(RegistrationStates.city)
    
    await message.answer(
        f"–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–µ—â–µ–Ω–∏–µ üëá",
        reply_markup=await first_letters()
    )


@router.callback_query(F.data == f"first_letter_A")
async def catalog(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—Ç–∞–ª–æ–≥", show_alert=True)







        
@router.callback_query(F.data.startswith("greeting_offer_choice_"))
async def get_selected_greeting_offer(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = await get_client(tg_id=user_id)
    user_data = {
            "tg_id": str(user.tg_id),
            "reg_name": user.reg_name,
            "reg_phone": user.reg_phone,
            "tg_username": user.tg_username,
            "tg_first_name": user.tg_first_name,
            "tg_last_name": user.tg_last_name,
        }
    # –ø–æ–ª—É—á–∞–µ–º client_id talk-me –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –ø–æ –ø–æ–ª—é created_at –≤ —Ç–∞–±–ª–∏—Ü–µ talk_me_messages_from_client)
    for i in range(5):
        client_id = await get_client_id(tg_id=user.tg_id)
        logger.info(f"[try {i}] talk-me client_id: {client_id}")
        if client_id:
            break
        else:
            await sleep(1)    
    
    
    
    
    if callback.data.split('_')[3] == 'manager':
        bot_msg = f"–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        await bot.send_message(chat_id=callback.message.chat.id, 
                               text=escape_markdown_v2(bot_msg), 
                               parse_mode=ParseMode.MARKDOWN_V2)
        
        await callback.answer()
        response = await talk_me.send_message_to_operator(client_id=client_id, 
                                                text=(
                                    f"[ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ]\n"
                                    f"[ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –±–æ—Ç–∞: {bot_msg} ]\n"
                                    f"[ –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ]\n"
                                    f"–ò–º—è: {user.reg_name}\n"
                                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.reg_phone}\n"
                                    ))
        logger.info(f"talk-me response send_message_to_operator: {response}")
        
        # send to es index: marketing-bot-manager-button
        index_name = 'marketing-bot-manager-button'
        try:
            ts = {
                "timestamp": datetime.now(ZoneInfo("Europe/Moscow")).isoformat(timespec='seconds')
            }
            await es.create_document(index_name=index_name, document= {**ts, **user_data})
        except Exception as e:
            logger.error(f"Error creating document in Elasticsearch (index name: {index_name}): {e}")
        
        
        
    else:
        greeting_offer_id = int(callback.data.split('_')[3])
        greeting_offer = await get_greeting_offer(offer_id=greeting_offer_id)
        general_data = {
            "user": user_data,
            "greeting_offer": {
                "id": str(greeting_offer.id),
                "name": greeting_offer.name,
                "old_price": str(greeting_offer.old_price),
                "new_price": str(greeting_offer.new_price),
                "equipment": greeting_offer.equipment,
            }
        }
        
        bot_msg = f"–ó–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É *{greeting_offer.name}* –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!"
        await bot.send_message(chat_id=callback.message.chat.id, 
                            text=escape_markdown_v2(bot_msg), 
                            parse_mode=ParseMode.MARKDOWN_V2)
        
        await callback.answer()
        
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤ talk-me
        response = await talk_me.send_message_to_operator(client_id=client_id, 
                                                        text=(
                                            f"[ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ]\n"
                                            f"[ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –±–æ—Ç–∞: {bot_msg} ]\n"
                                            f"[ –ó–ê–Ø–í–ö–ê ]\n"
                                            f"–ò–º—è: {user.reg_name}\n"
                                            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.reg_phone}\n"
                                            f"–£—Å–ª—É–≥–∞: {greeting_offer.name}\n"
                                            f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {greeting_offer.old_price}\n"
                                            f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {greeting_offer.new_price}\n"
                                            ))
        logger.info(f"talk-me response send_message_to_operator: {response}")
        
        
        # send to es index: marketing-bot-greeting-offer-buttons
        index_name = 'marketing-bot-greeting-offer-buttons'
        try:
            ts = {
                "timestamp": datetime.now(ZoneInfo("Europe/Moscow")).isoformat(timespec='seconds')
            }
            await es.create_document(index_name=index_name, document= {**ts, **general_data})
        except Exception as e:
            logger.error(f"Error creating document in Elasticsearch (index name: {index_name}): {e}")

    